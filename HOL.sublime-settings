{
	//GENERAL REPL SETTINGS - Defaults licensed under GPLv2 (see GPL-LICENSE.TXT)
	
	// default_extend_env are used to augment any environment variables
	// that should be visible for all subprocess repls launched within
	// SublimeHOL. This is a very good place to add PATH extension
	// once "PATH": "{PATH}:/home/username/mylocalinstalls/bin" or whatever
	"default_extend_env": {},

	// Specify whether to move repls to a different Sublime Text group (frame)
	// immediately on opening. Setting this to true will simply move it to
	// the 'next' group from the one that was in focus when it was opened
	// (one down with row layout, one to the right with column and grid
	// layout). Alternatively, you can set this to the index of the group in
	// which you want all repls to be opened (index 0 being the top-left group).
	// Activating this option will NOT automatically change your layout/create
	// a new group if it isn't open.
	"open_repl_in_group": true,

	"persistent_history_enabled": true,

	// By default SublimeHOL leaves REPL view open once the underlying subprocess
	// dies or closes connection. This is useful when the process dies for an unexpected
	// reason as it allows you to inspect it output. If you want. Setting this
	// to true will cause SublimreREPL to close view once the process died.
	"view_auto_close": false,

	// On POSIX system SublimeText launched from GUI does not inherit
	// a proper environment. Often leading to problems with finding interpreters
	// or not using the ones affected by changes in ~/.profile / *rc files
	// This command is used as a workaround, it's launched before any subprocess
	// repl starts and it's output is parsed as an environment
	"getenv_command": ["/bin/bash", "--login", "-c", "env"],

	// Some terminals output ascii color codes enable this option to filter them out.
	"filter_ascii_color_codes": false,

	// Use arrows for history navigation instead of Alt+[P|N]/Ctrl+[P|N]
	"history_arrows": true,

	// standard sublime view settings that will be overwritten on each repl view
	// this has to be customized as a whole dictionary
	"repl_view_settings": {
		"translate_tabs_to_spaces": false,
		"auto_indent": false,
		"smart_indent": false,
		"spell_check": false,
		"indent_subsequent_lines": false,
		"detect_indentation": false,
		"auto_complete": true,
		"line_numbers": false,
		"gutter": false
	},

	// this settings exposes additional variables in repl config files, especially
	// those related to sublime projects that are not available through standard API
	// WARNING: this will switch your build system back to Automatic each time a REPL
	// is started so beware!
	"use_build_system_hack": false,

	// IP address used to setup autocomplete server in sublimehol.
	// changing this is usefull when you want to exclude one address
	// from proxychains/tsocks routing
	"autocomplete_server_ip": "127.0.0.1",

	// If set to true, SublimeHOL will try to append evaluated code to repl
	// output before evaluation (e.g. Ctrl+, f)
	"show_transferred_text": false,

	// If set to true repl view (tab) that receives text for evaluation will
	// be brought to front after text transfer. Note: This will not fire if repl view
	// is in the same tab group as the view from which the code is sent.
	"focus_view_on_transfer": true,

	//ANSI SETTINGS - Defaults licensed under MIT (see MIT-LICENSE.TXT)

	"ANSI_FG": [
      {"scope": "black", "code": "\\x1b\\[(\\d{,2};)*?30[m;]", "color": "#000000"},
      {"scope": "black_bright", "code": "\\x1b\\[(\\d{,2};)*?90[m;]", "color": "#686868"},
      {"scope": "red", "code": "\\x1b\\[(\\d{,2};)*?31[m;]", "color": "#c71e12"},
      {"scope": "red_bright", "code": "\\x1b\\[(\\d{,2};)*?91[m;]", "color": "#ff6f6b"},
      {"scope": "green", "code": "\\x1b\\[(\\d{,2};)*?32[m;]", "color": "#00c120"},
      {"scope": "green_bright", "code": "\\x1b\\[(\\d{,2};)*?92[m;]", "color": "#67f86f"},
      {"scope": "yellow", "code": "\\x1b\\[(\\d{,2};)*?33[m;]", "color": "#c7c327"},
      {"scope": "yellow_bright", "code": "\\x1b\\[(\\d{,2};)*?93[m;]", "color": "#fffa72"},
      {"scope": "blue", "code": "\\x1b\\[(\\d{,2};)*?34[m;]", "color": "#0a2fc4"},
      {"scope": "blue_bright", "code": "\\x1b\\[(\\d{,2};)*?94[m;]", "color": "#6a76fc"},
      {"scope": "magenta", "code": "\\x1b\\[(\\d{,2};)*?35[m;]", "color": "#c839c5"},
      {"scope": "magenta_bright", "code": "\\x1b\\[(\\d{,2};)*?95[m;]", "color": "#ff7cfd"},
      {"scope": "cyan", "code": "\\x1b\\[(\\d{,2};)*?36[m;]", "color": "#01c5c6"},
      {"scope": "cyan_bright", "code": "\\x1b\\[(\\d{,2};)*?96[m;]", "color": "#68fdfe"},
      {"scope": "white", "code": "\\x1b\\[(\\d{,2};)*?(37)?[m;]", "color": "#c7c7c7"},
      {"scope": "white_bright", "code": "\\x1b\\[(\\d{,2};)*?97[m;]", "color": "#ffffff"},
      {"scope": "_bold", "code": "\\x1b\\[(\\d{,2};)*?1[m;]", "color": "#ffffff", "font_style": "bold"}
  ],
  "ANSI_BG": [
      {"scope": "", "code": "(?<!\\x1b\\[0;4[01234567]m)(?<!\\x1b\\[4[01234567]m)", "color": "#010000"},
      {"scope": "_bg_black", "code": "\\x1b\\[(\\d{,2};)*?40[m;]", "color": "#222222"},
      {"scope": "_bg_black_bright", "code": "\\x1b\\[(\\d{,2};)*?100[m;]", "color": "#686868"},
      {"scope": "_bg_red", "code": "\\x1b\\[(\\d{,2};)*?41[m;]", "color": "#c71e12"},
      {"scope": "_bg_red_bright", "code": "\\x1b\\[(\\d{,2};)*?101[m;]", "color": "#ff6f6b"},
      {"scope": "_bg_green", "code": "\\x1b\\[(\\d{,2};)*?42[m;]", "color": "#00c120"},
      {"scope": "_bg_green_bright", "code": "\\x1b\\[(\\d{,2};)*?102[m;]", "color": "#67f86f"},
      {"scope": "_bg_yellow", "code": "\\x1b\\[(\\d{,2};)*?43[m;]", "color": "#c7c327"},
      {"scope": "_bg_yellow_bright", "code": "\\x1b\\[(\\d{,2};)*?103[m;]", "color": "#fffa72"},
      {"scope": "_bg_blue", "code": "\\x1b\\[(\\d{,2};)*?44[m;]", "color": "#0a2fc4"},
      {"scope": "_bg_blue_bright", "code": "\\x1b\\[(\\d{,2};)*?104[m;]", "color": "#6a76fc"},
      {"scope": "_bg_magenta", "code": "\\x1b\\[(\\d{,2};)*?45[m;]", "color": "#c839c5"},
      {"scope": "_bg_magenta_bright", "code": "\\x1b\\[(\\d{,2};)*?105[m;]", "color": "#ff7cfd"},
      {"scope": "_bg_cyan", "code": "\\x1b\\[(\\d{,2};)*?46[m;]", "color": "#01c5c6"},
      {"scope": "_bg_cyan_bright", "code": "\\x1b\\[(\\d{,2};)*?106[m;]", "color": "#68fdfe"},
      {"scope": "_bg_white", "code": "\\x1b\\[(\\d{,2};)*?47[m;]", "color": "#c7c7c7"},
      {"scope": "_bg_white_bright", "code": "\\x1b\\[(\\d{,2};)*?107[m;]", "color": "#ffffff"},
      {"scope": "_bold", "code": "\\x1b\\[(\\d{,2};)*?1[m;]", "color": "#010000", "font_style": "bold"}
  ],
  "GENERAL":  {
    "background":       "#000000",
    "caret":            "#FF5E00",
    "foreground":       "#F2F2F2",
    "gutter":           "#000000",
    "gutterForeground": "#FFFFFF55",
    "invisibles":       "#FFFFFF00",
    "lineHighlight":    "#FFFFFF00",
    "selection":        "#FFFFFF33"
  },
  // when to process ANSI encoded string
  // possible values:
  // - on_finish - after whole build process (default)
  // - on_data - when new data is posted to exec output
  "ANSI_process_trigger": "on_finish",
}
